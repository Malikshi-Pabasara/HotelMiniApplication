<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Contacts.Activities</name>
    </assembly>
    <members>
        <member name="T:Cenium.Contacts.Activities.ContactsActivity">
            <summary>
            The ContactsActivity class is an activity class that exposes data operation methods to the service layer. This class is responsible for applying business logic prior to making
            updates in the data store.
            </summary>
            <seealso cref="T:Cenium.Contacts.Data.Contact"/>
            <seealso cref="T:Cenium.Contacts.Data.ContactsEntitiesContext"/>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.#ctor">
            <summary>
            Initializes a new instance of the ContactsActivity class
            </summary>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.#ctor(Cenium.Contacts.Data.ContactsEntitiesContext)">
            <summary>
            Initializes a new instance of the ContactsActivity class, sharing the context with other activities
            </summary>
            <param name="ctx">The shared context</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Query">
            <summary>
            Activity query method that returns an IEnumerable&lt;Contact&gt; instance. 
            </summary>
            <returns>A strongly type IEnumerable instance </returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Get(System.Int64)">
            <summary>
            Gets a Contact instance from the datastore based on Contact keys.
            </summary>
            <param name="contactId">The key for Contact</param>
            <returns>A Contact instance, or null if there is no entities with the given key</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Create(Cenium.Contacts.Data.Contact)">
            <summary>
            Adds a new instance of Contact to the data store
            </summary>
            <param name="contact">The instance to add</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Update(Cenium.Contacts.Data.Contact)">
            <summary>
            Updates a Contact instance in the data store
            </summary>
            <param name="contact">The instance to update</param>
            <returns>The updated instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Delete(Cenium.Contacts.Data.Contact)">
            <summary>
            Deletes a Contact instance from the data store
            </summary>
            <param name="contact">The instance to delete</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.GetFromDatastore(System.Int64)">
            <summary>
            Retrieves a single entity instance from the data store
            </summary>
            <param name="contactId">The key for Contact</param>
            <returns>A single Contact instance, or null if the instance doesn't exist</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.ContactsActivity.Dispose">
            <summary>
            Releases all resources used by this ContactsActivity instance.
            </summary>
        </member>
        <member name="T:Cenium.Contacts.Activities.EmailsActivity">
            <summary>
            The EmailsActivity class is an activity class that exposes data operation methods to the service layer. This class is responsible for applying business logic prior to making
            updates in the data store.
            </summary>
            <seealso cref="T:Cenium.Contacts.Data.Email"/>
            <seealso cref="T:Cenium.Contacts.Data.ContactsEntitiesContext"/>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.#ctor">
            <summary>
            Initializes a new instance of the EmailsActivity class
            </summary>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.#ctor(Cenium.Contacts.Data.ContactsEntitiesContext)">
            <summary>
            Initializes a new instance of the EmailsActivity class, sharing the context with other activities
            </summary>
            <param name="ctx">The shared context</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Query">
            <summary>
            Activity query method that returns an IEnumerable&lt;Email&gt; instance. 
            </summary>
            <returns>A strongly type IEnumerable instance </returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Get(System.Int64)">
            <summary>
            Gets a Email instance from the datastore based on Email keys.
            </summary>
            <param name="emailId">The key for Email</param>
            <returns>A Email instance, or null if there is no entities with the given key</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Create(Cenium.Contacts.Data.Email)">
            <summary>
            Adds a new instance of Email to the data store
            </summary>
            <param name="email">The instance to add</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Update(Cenium.Contacts.Data.Email)">
            <summary>
            Updates a Email instance in the data store
            </summary>
            <param name="email">The instance to update</param>
            <returns>The updated instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Delete(Cenium.Contacts.Data.Email)">
            <summary>
            Deletes a Email instance from the data store
            </summary>
            <param name="email">The instance to delete</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.GetFromDatastore(System.Int64)">
            <summary>
            Retrieves a single entity instance from the data store
            </summary>
            <param name="emailId">The key for Email</param>
            <returns>A single Email instance, or null if the instance doesn't exist</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.EmailsActivity.Dispose">
            <summary>
            Releases all resources used by this EmailsActivity instance.
            </summary>
        </member>
        <member name="T:Cenium.Contacts.Activities.NamespaceDoc">
            <summary>
            Contains activity classes that comprise the application processing layer of the component Contacts
            </summary>
        </member>
        <member name="T:Cenium.Contacts.Activities.PhonesActivity">
            <summary>
            The PhonesActivity class is an activity class that exposes data operation methods to the service layer. This class is responsible for applying business logic prior to making
            updates in the data store.
            </summary>
            <seealso cref="T:Cenium.Contacts.Data.Phone"/>
            <seealso cref="T:Cenium.Contacts.Data.ContactsEntitiesContext"/>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.#ctor">
            <summary>
            Initializes a new instance of the PhonesActivity class
            </summary>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.#ctor(Cenium.Contacts.Data.ContactsEntitiesContext)">
            <summary>
            Initializes a new instance of the PhonesActivity class, sharing the context with other activities
            </summary>
            <param name="ctx">The shared context</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Query">
            <summary>
            Activity query method that returns an IEnumerable&lt;Phone&gt; instance. 
            </summary>
            <returns>A strongly type IEnumerable instance </returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Get(System.Int64)">
            <summary>
            Gets a Phone instance from the datastore based on Phone keys.
            </summary>
            <param name="phoneId">The key for Phone</param>
            <returns>A Phone instance, or null if there is no entities with the given key</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Create(Cenium.Contacts.Data.Phone)">
            <summary>
            Adds a new instance of Phone to the data store
            </summary>
            <param name="phone">The instance to add</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Update(Cenium.Contacts.Data.Phone)">
            <summary>
            Updates a Phone instance in the data store
            </summary>
            <param name="phone">The instance to update</param>
            <returns>The updated instance</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Delete(Cenium.Contacts.Data.Phone)">
            <summary>
            Deletes a Phone instance from the data store
            </summary>
            <param name="phone">The instance to delete</param>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.GetFromDatastore(System.Int64)">
            <summary>
            Retrieves a single entity instance from the data store
            </summary>
            <param name="phoneId">The key for Phone</param>
            <returns>A single Phone instance, or null if the instance doesn't exist</returns>
        </member>
        <member name="M:Cenium.Contacts.Activities.PhonesActivity.Dispose">
            <summary>
            Releases all resources used by this PhonesActivity instance.
            </summary>
        </member>
    </members>
</doc>
